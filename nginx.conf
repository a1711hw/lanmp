# 定义Nginx运行的用户和用户组
user nobody nobody;

# Nginx进程数，建议设置为CPU的总核心数
worker_processes 2;

# 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]
error_log logs/nginx_error.log crit;

# 进程文件
pid logs/nginx.pid;

# 打开文件数,可以使用cat /proc/sys/fs/file-max命令查看系统可以打开的文件数。
worker_rlimit_nofile 51200;

# 工作模式与连接数上限
events
{
    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    # epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;

    # 单个进程最大连接数（最大连接数=连接数*进程数）该值受系统进程最大打开文件数限制，需要使用命令ulimit -n 查看当前设置。
    worker_connections 6000;

    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：2 * 6000 = 12000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 当前系统的内存是1G，可以打开的文件句柄数是
    # cat /proc/sys/fs/file-max
    # 98025
    # 12000 < 98025，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目,其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
}

http
{
    # 文件扩展名与文件类型映射表
    include mime.types;

    # 默认文件类型
    index index.html index.htm index.php;

    default_type application/octet-stream;
    server_names_hash_bucket_size 3526;
    server_names_hash_max_size 4096;

    # 日志的格式
    log_format combined_realip '$remote_addr $http_x_forwarded_for [$time_local]'
    ' $host "$request_uri" $status'
    ' "$http_referer" "$http_user_agent"';

    # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
    # 防止网络阻塞
    tcp_nopush   on;
 
    # 防止网络阻塞
    tcp_nodelay  on;

    # 隐藏版本信息
    server_tokens off;

    # 连接超时时间
    keepalive_timeout 30;

    client_header_timeout 3m;
    client_body_timeout 3m;

    # 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。
    send_timeout 3m;

    connection_pool_size 256;
    client_header_buffer_size 1k;
    large_client_header_buffers 8 4k;
    request_pool_size 4k;
    output_buffers 4 32k;
    postpone_output 1460;

    # 设定通过nginx上传文件的大小
    client_max_body_size 10m;

    client_body_buffer_size 256k;
    client_body_temp_path /usr/local/nginx/client_body_temp;
    proxy_temp_path /usr/local/nginx/proxy_temp;
    fastcgi_temp_path /usr/local/nginx/fastcgi_temp;
    fastcgi_intercept_errors on;

    # gzip模块设置
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 8k;
    gzip_comp_level 5;
    gzip_http_version 1.1;
    gzip_types text/plain application/x-javascript text/css text/htm application/xml;

    # 虚拟主机配置
    include vhosts/*.conf;
}
